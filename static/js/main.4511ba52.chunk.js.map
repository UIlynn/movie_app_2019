{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","to","pathname","state","className","src","alt","map","genre","index","key","slice","Home","isLoading","movies","getMovie","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","About","props","console","log","Detail","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"yUA8CeA,MAvCf,YAA2D,IAA3CC,EAA0C,EAA1CA,GAAIC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC9C,OACE,kBAAC,IAAD,CAAMC,GAAI,CAERC,SAAQ,iBAAaP,GACrBQ,MAAQ,CACNP,KAAOA,EACPC,QACAC,UACAC,SACAC,YAGJ,yBAAKI,UAAU,SACb,yBAAKC,IAAKN,EAAQO,IAAKT,EAAOA,MAAOA,IACrC,yBAAKO,UAAU,cACb,wBAAIA,UAAU,gBAAgBP,GAC9B,wBAAIO,UAAU,eAAeR,GAC7B,wBAAIQ,UAAU,iBACXJ,EAAOO,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,EAAOL,UAAU,iBAAiBI,MACzC,KAEN,uBAAGJ,UAAU,iBAAiBN,EAAQa,MAAM,EAAE,UCgCzCC,G,kNAxDbT,MAAQ,CACNU,WAAY,EACZC,OAAS,I,EAIXC,S,sBAAW,8BAAAC,EAAA,sEAM4BC,IAAMC,IAAI,4DANtC,gBAMUJ,EANV,EAMFK,KAAMA,KAAML,OAKnB,EAAKM,SAAS,CAACN,SAAQD,WAAW,IAXzB,2C,4KAiBTQ,KAAKN,W,qIAIE,IAAD,EACsBM,KAAKlB,MAA1BU,EADD,EACCA,UAAWC,EADZ,EACYA,OAElB,OACE,6BAASV,UAAU,aAChBS,EACC,yBAAKT,UAAU,UACb,0BAAMA,UAAU,eAAhB,iBAGF,yBAAKA,UAAU,UACZU,EAAOP,KAAI,SAACe,GAAD,OACR,kBAAC,EAAD,CACEZ,IAAKY,EAAM3B,GACXA,GAAI2B,EAAM3B,GACVC,KAAM0B,EAAM1B,KACZC,MAAOyB,EAAMzB,MACbC,QAASwB,EAAMxB,QACfC,OAAQuB,EAAMC,mBACdvB,OAAQsB,EAAMtB,kB,GA/CbwB,IAAMC,YCGVC,MALf,SAAeC,GAEX,OADAC,QAAQC,IAAIF,GACL,kDCwBIG,E,kLArBQ,MAEaT,KAAKM,MAA1BI,EAFQ,EAERA,SAAUC,EAFF,EAEEA,aAIIC,IAAjBF,EAAS5B,OACT6B,EAAQE,KAAK,O,+BAIZ,IACEH,EAAYV,KAAKM,MAAjBI,SACP,OAAIA,EAAS5B,MACF,8BAAO4B,EAAS5B,MAAMN,OAEtB,S,GAnBE2B,IAAMC,WCYZU,MAVf,WACI,OACE,6BACE,kBAAC,IAAD,CAAMlC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCaOmC,MAjBf,WAIE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MAEA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW3B,IACxC,kBAAC,IAAD,CAAOyB,KAAK,SAASE,UAAWb,IAGhC,kBAAC,IAAD,CAAOW,KAAK,aAAaE,UAAWT,MCd1CU,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.4511ba52.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport \"./Movie.css\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n// state가 딱히 필요하지 않는 경우는 function component\r\n// state가 필요하면 class component\r\nfunction Movie({id, year, title, summary, poster, genres}){\r\n    return (\r\n      <Link to={{\r\n        // pathname : '/movie-detail',\r\n        pathname : `/movie/${id}`, // id-url 패턴 반영\r\n        state : { // 이동하면 전송할 값\r\n          year : year, // 기존 표현\r\n          title, // ES6표현\r\n          summary,\r\n          poster,\r\n          genres\r\n        } \r\n      }}>\r\n      <div className=\"movie\">\r\n        <img src={poster} alt={title} title={title} />\r\n        <div className=\"movie_data\">\r\n          <h3 className=\"movie__title\">{title}</h3>\r\n          <h5 className=\"movie__year\">{year}</h5>\r\n          <ul className=\"movie__genres\">\r\n            {genres.map((genre, index) => (\r\n              <li key={index} className=\"genres__genre\">{genre}</li>\r\n            ))}{\" \"}\r\n          </ul>\r\n          <p className=\"movie_summary\">{summary.slice(0,180)}</p>\r\n        </div>\r\n      </div>\r\n      </Link>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id : PropTypes.number.isRequired,\r\n    year : PropTypes.number.isRequired,\r\n    title : PropTypes.string.isRequired,\r\n    summary : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    genres : PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;","import React from 'react';\r\nimport axios from 'axios';\r\nimport Movie from '../components/Movie';\r\nimport \"./Home.css\";\r\n\r\nclass Home extends React.Component{\r\n  state = {\r\n    isLoading : true,\r\n    movies : [],\r\n  }\r\n\r\n  // 비동기 호출\r\n  getMovie = async ()=>{\r\n    // fetch 와 같은 기능\r\n    // const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\r\n    // console.log(movies.data.data.movies)\r\n \r\n    // 위를 es6로 변경\r\n    const {data:{data:{movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\r\n    // console.log(movies)\r\n\r\n    // state에 movies를 변경\r\n    // this.setState({movies:movies});\r\n    this.setState({movies, isLoading: false }); // ES6\r\n\r\n  }\r\n\r\n  // render후 첫번째 호출\r\n  async componentDidMount(){\r\n    this.getMovie();\r\n  }\r\n\r\n  // render\r\n  render(){\r\n    const {isLoading, movies} = this.state;\r\n\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader_text\">\"Loading...\"</span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"movies\">\r\n            {movies.map((movie) => (\r\n                <Movie\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  year={movie.year}\r\n                  title={movie.title}\r\n                  summary={movie.summary}\r\n                  poster={movie.medium_cover_image}\r\n                  genres={movie.genres}\r\n                />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\n\r\n\r\nfunction About(props){\r\n    console.log(props);\r\n    return <span>About this page</span>\r\n}\r\n\r\nexport default About;","import React from 'react';\r\n\r\n\r\n\r\n\r\nclass Detail extends React.Component{\r\n\r\n    // 최초의 render이후 -> componentDidMount\r\n    componentDidMount(){\r\n        // console.log(this.props); // 우리가 원하는 데이터가 location.state에 있음\r\n        const {location, history} = this.props;\r\n        \r\n        // movie-detail로 바로 접속할 경우 props가 없으므로 리다이렉트\r\n        // history에는 url을 변경할 수 있는 여러 메소드가 들어있다\r\n        if (location.state===undefined){\r\n            history.push('/'); // push : 어디에 있던 해당 url로 이동\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {location} = this.props;\r\n        if (location.state){\r\n            return <span>{location.state.title}</span>\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Detail;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\n\r\n// a href 를 하면 html이 새로고침되고 react는 죽음\r\n// a 대신 Link 사용해보자. href 대시 to\r\n\r\nfunction Navigation(){\r\n    return (\r\n      <div>\r\n        <Link to=\"/\">HOME</Link>\r\n        <Link to=\"/about\">About</Link>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Navigation;","import React from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from \"./routes/Home\"\nimport About from \"./routes/About\"\nimport Detail from \"./routes/Detail\"\nimport Navigation from './components/Navigation';\n\nfunction App(){\n  // url 라우터 설정\n  // [주의] Navigation은 Router(정확히는 HashRouter) 밖에서 사용할 수 없다.\n  // [변경] HashRouter -> BrowserRouter로 변경하면 #이 없어지긴 하나 github pages에서는 HashRouter가 더 편함\n  return (\n    <HashRouter>\n      <Navigation />\n      {/* exact={true} : 완벽할 때 렌더링*/}\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      {/* <Route path=\"/movie-detail\" component={Detail} /> */}\n      {/* id-url 패턴 반영 */}\n      <Route path=\"/movie/:id\" component={Detail} /> \n    </HashRouter>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n"],"sourceRoot":""}